// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: tensorflow/compiler/mlir/quantization/tensorflow/quantization_options.proto

package tensorflow

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	framework "grpc-client/internal/tensorflow/tensorflow/tensorflow/core/framework"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of supported opsets to deploy the quantized model.
// The quantized model contains different set of ops depending on the opset.
// NEXT ID: 4
type OpSet int32

const (
	OpSet_OP_SET_UNSPECIFIED OpSet = 0 // go/do-include-enum-unspecified
	// Uses TF ops that mimic quantization behavior. Used when the corresponding
	// integer op is not yet present.
	OpSet_TF OpSet = 1
	// Uses TF XLA ops
	OpSet_XLA OpSet = 2
	// Uses TF Uniform Quantized ops
	OpSet_UNIFORM_QUANTIZED OpSet = 3
)

// Enum value maps for OpSet.
var (
	OpSet_name = map[int32]string{
		0: "OP_SET_UNSPECIFIED",
		1: "TF",
		2: "XLA",
		3: "UNIFORM_QUANTIZED",
	}
	OpSet_value = map[string]int32{
		"OP_SET_UNSPECIFIED": 0,
		"TF":                 1,
		"XLA":                2,
		"UNIFORM_QUANTIZED":  3,
	}
)

func (x OpSet) Enum() *OpSet {
	p := new(OpSet)
	*p = x
	return p
}

func (x OpSet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpSet) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[0].Descriptor()
}

func (OpSet) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[0]
}

func (x OpSet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpSet.Descriptor instead.
func (OpSet) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{0}
}

// Quantization methods that are supported as a stable API.
type QuantizationMethod_Method int32

const (
	// This should never be used. Using this will generally result in an error.
	QuantizationMethod_METHOD_UNSPECIFIED QuantizationMethod_Method = 0 // go/do-include-enum-unspecified
)

// Enum value maps for QuantizationMethod_Method.
var (
	QuantizationMethod_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
	}
	QuantizationMethod_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
	}
)

func (x QuantizationMethod_Method) Enum() *QuantizationMethod_Method {
	p := new(QuantizationMethod_Method)
	*p = x
	return p
}

func (x QuantizationMethod_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantizationMethod_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[1].Descriptor()
}

func (QuantizationMethod_Method) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[1]
}

func (x QuantizationMethod_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantizationMethod_Method.Descriptor instead.
func (QuantizationMethod_Method) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{0, 0}
}

// Experimental quantization methods.
// These methods are either not implemented or provided with an unstable
// behavior.
type QuantizationMethod_ExperimentalMethod int32

const (
	// This should never be used. Using this will generally result in an error.
	QuantizationMethod_EXPERIMENTAL_METHOD_UNSPECIFIED QuantizationMethod_ExperimentalMethod = 0 // go/do-include-enum-unspecified
	// Static range quantization. Quantized tensor values' ranges are statically
	// determined.
	QuantizationMethod_STATIC_RANGE QuantizationMethod_ExperimentalMethod = 1
	// Dynamic range quantization. Quantized tensor values' ranges are
	// determined in the graph executions. The weights are quantized during
	// conversion.
	QuantizationMethod_DYNAMIC_RANGE QuantizationMethod_ExperimentalMethod = 2
	// Weight-only quantization. Only weights are quantized during conversion.
	QuantizationMethod_WEIGHT_ONLY QuantizationMethod_ExperimentalMethod = 3
)

// Enum value maps for QuantizationMethod_ExperimentalMethod.
var (
	QuantizationMethod_ExperimentalMethod_name = map[int32]string{
		0: "EXPERIMENTAL_METHOD_UNSPECIFIED",
		1: "STATIC_RANGE",
		2: "DYNAMIC_RANGE",
		3: "WEIGHT_ONLY",
	}
	QuantizationMethod_ExperimentalMethod_value = map[string]int32{
		"EXPERIMENTAL_METHOD_UNSPECIFIED": 0,
		"STATIC_RANGE":                    1,
		"DYNAMIC_RANGE":                   2,
		"WEIGHT_ONLY":                     3,
	}
)

func (x QuantizationMethod_ExperimentalMethod) Enum() *QuantizationMethod_ExperimentalMethod {
	p := new(QuantizationMethod_ExperimentalMethod)
	*p = x
	return p
}

func (x QuantizationMethod_ExperimentalMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantizationMethod_ExperimentalMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[2].Descriptor()
}

func (QuantizationMethod_ExperimentalMethod) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[2]
}

func (x QuantizationMethod_ExperimentalMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantizationMethod_ExperimentalMethod.Descriptor instead.
func (QuantizationMethod_ExperimentalMethod) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{0, 1}
}

// NEXT ID: 4
type QuantizationComponentSpec_QuantizationComponent int32

const (
	QuantizationComponentSpec_COMPONENT_UNSPECIFIED QuantizationComponentSpec_QuantizationComponent = 0
	QuantizationComponentSpec_COMPONENT_ACTIVATION  QuantizationComponentSpec_QuantizationComponent = 1
	QuantizationComponentSpec_COMPONENT_WEIGHT      QuantizationComponentSpec_QuantizationComponent = 2
	QuantizationComponentSpec_COMPONENT_BIAS        QuantizationComponentSpec_QuantizationComponent = 3
)

// Enum value maps for QuantizationComponentSpec_QuantizationComponent.
var (
	QuantizationComponentSpec_QuantizationComponent_name = map[int32]string{
		0: "COMPONENT_UNSPECIFIED",
		1: "COMPONENT_ACTIVATION",
		2: "COMPONENT_WEIGHT",
		3: "COMPONENT_BIAS",
	}
	QuantizationComponentSpec_QuantizationComponent_value = map[string]int32{
		"COMPONENT_UNSPECIFIED": 0,
		"COMPONENT_ACTIVATION":  1,
		"COMPONENT_WEIGHT":      2,
		"COMPONENT_BIAS":        3,
	}
)

func (x QuantizationComponentSpec_QuantizationComponent) Enum() *QuantizationComponentSpec_QuantizationComponent {
	p := new(QuantizationComponentSpec_QuantizationComponent)
	*p = x
	return p
}

func (x QuantizationComponentSpec_QuantizationComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantizationComponentSpec_QuantizationComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[3].Descriptor()
}

func (QuantizationComponentSpec_QuantizationComponent) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[3]
}

func (x QuantizationComponentSpec_QuantizationComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantizationComponentSpec_QuantizationComponent.Descriptor instead.
func (QuantizationComponentSpec_QuantizationComponent) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{1, 0}
}

// NEXT ID: 4
type QuantizationComponentSpec_TensorType int32

const (
	QuantizationComponentSpec_TENSORTYPE_UNSPECIFIED QuantizationComponentSpec_TensorType = 0
	QuantizationComponentSpec_TENSORTYPE_INT_4       QuantizationComponentSpec_TensorType = 1
	QuantizationComponentSpec_TENSORTYPE_INT_8       QuantizationComponentSpec_TensorType = 2
	QuantizationComponentSpec_TENSORTYPE_INT_32      QuantizationComponentSpec_TensorType = 3
)

// Enum value maps for QuantizationComponentSpec_TensorType.
var (
	QuantizationComponentSpec_TensorType_name = map[int32]string{
		0: "TENSORTYPE_UNSPECIFIED",
		1: "TENSORTYPE_INT_4",
		2: "TENSORTYPE_INT_8",
		3: "TENSORTYPE_INT_32",
	}
	QuantizationComponentSpec_TensorType_value = map[string]int32{
		"TENSORTYPE_UNSPECIFIED": 0,
		"TENSORTYPE_INT_4":       1,
		"TENSORTYPE_INT_8":       2,
		"TENSORTYPE_INT_32":      3,
	}
)

func (x QuantizationComponentSpec_TensorType) Enum() *QuantizationComponentSpec_TensorType {
	p := new(QuantizationComponentSpec_TensorType)
	*p = x
	return p
}

func (x QuantizationComponentSpec_TensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantizationComponentSpec_TensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[4].Descriptor()
}

func (QuantizationComponentSpec_TensorType) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[4]
}

func (x QuantizationComponentSpec_TensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantizationComponentSpec_TensorType.Descriptor instead.
func (QuantizationComponentSpec_TensorType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{1, 1}
}

// Quantization unit granularity.
// NEXT ID: 3
type UnitWiseQuantizationSpec_UnitType int32

const (
	// This should never be used. Using this will generally result in an error.
	UnitWiseQuantizationSpec_UNIT_UNSPECIFIED UnitWiseQuantizationSpec_UnitType = 0
	UnitWiseQuantizationSpec_UNIT_NODE        UnitWiseQuantizationSpec_UnitType = 1
	UnitWiseQuantizationSpec_UNIT_OP          UnitWiseQuantizationSpec_UnitType = 2
)

// Enum value maps for UnitWiseQuantizationSpec_UnitType.
var (
	UnitWiseQuantizationSpec_UnitType_name = map[int32]string{
		0: "UNIT_UNSPECIFIED",
		1: "UNIT_NODE",
		2: "UNIT_OP",
	}
	UnitWiseQuantizationSpec_UnitType_value = map[string]int32{
		"UNIT_UNSPECIFIED": 0,
		"UNIT_NODE":        1,
		"UNIT_OP":          2,
	}
)

func (x UnitWiseQuantizationSpec_UnitType) Enum() *UnitWiseQuantizationSpec_UnitType {
	p := new(UnitWiseQuantizationSpec_UnitType)
	*p = x
	return p
}

func (x UnitWiseQuantizationSpec_UnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitWiseQuantizationSpec_UnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[5].Descriptor()
}

func (UnitWiseQuantizationSpec_UnitType) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes[5]
}

func (x UnitWiseQuantizationSpec_UnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitWiseQuantizationSpec_UnitType.Descriptor instead.
func (UnitWiseQuantizationSpec_UnitType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{2, 0}
}

// Model quantization method for optimization.
//
// Various techniques for model quantization are defined within this message
// along with a field that specifies a method to be used for a particular
// quantization request.
// NEXT ID: 4
type QuantizationMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quantization method is one of exprimental or non-experimental.
	//
	// Types that are assignable to MethodOneof:
	//
	//	*QuantizationMethod_Method_
	//	*QuantizationMethod_ExperimentalMethod_
	MethodOneof                isQuantizationMethod_MethodOneof `protobuf_oneof:"method_oneof"`
	QuantizationComponentSpecs []*QuantizationComponentSpec     `protobuf:"bytes,3,rep,name=quantization_component_specs,json=quantizationComponentSpecs,proto3" json:"quantization_component_specs,omitempty"`
}

func (x *QuantizationMethod) Reset() {
	*x = QuantizationMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantizationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantizationMethod) ProtoMessage() {}

func (x *QuantizationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantizationMethod.ProtoReflect.Descriptor instead.
func (*QuantizationMethod) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{0}
}

func (m *QuantizationMethod) GetMethodOneof() isQuantizationMethod_MethodOneof {
	if m != nil {
		return m.MethodOneof
	}
	return nil
}

func (x *QuantizationMethod) GetMethod() QuantizationMethod_Method {
	if x, ok := x.GetMethodOneof().(*QuantizationMethod_Method_); ok {
		return x.Method
	}
	return QuantizationMethod_METHOD_UNSPECIFIED
}

func (x *QuantizationMethod) GetExperimentalMethod() QuantizationMethod_ExperimentalMethod {
	if x, ok := x.GetMethodOneof().(*QuantizationMethod_ExperimentalMethod_); ok {
		return x.ExperimentalMethod
	}
	return QuantizationMethod_EXPERIMENTAL_METHOD_UNSPECIFIED
}

func (x *QuantizationMethod) GetQuantizationComponentSpecs() []*QuantizationComponentSpec {
	if x != nil {
		return x.QuantizationComponentSpecs
	}
	return nil
}

type isQuantizationMethod_MethodOneof interface {
	isQuantizationMethod_MethodOneof()
}

type QuantizationMethod_Method_ struct {
	Method QuantizationMethod_Method `protobuf:"varint,1,opt,name=method,proto3,enum=tensorflow.quantization.QuantizationMethod_Method,oneof"`
}

type QuantizationMethod_ExperimentalMethod_ struct {
	ExperimentalMethod QuantizationMethod_ExperimentalMethod `protobuf:"varint,2,opt,name=experimental_method,json=experimentalMethod,proto3,enum=tensorflow.quantization.QuantizationMethod_ExperimentalMethod,oneof"`
}

func (*QuantizationMethod_Method_) isQuantizationMethod_MethodOneof() {}

func (*QuantizationMethod_ExperimentalMethod_) isQuantizationMethod_MethodOneof() {}

// Defines tensor type of the component. If the combination is not supported,
// an error will be raised.
// NEXT ID: 3
type QuantizationComponentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines target component.
	QuantizationComponent QuantizationComponentSpec_QuantizationComponent `protobuf:"varint,1,opt,name=quantization_component,json=quantizationComponent,proto3,enum=tensorflow.quantization.QuantizationComponentSpec_QuantizationComponent" json:"quantization_component,omitempty"`
	// Defines the target tensor type.
	TensorType QuantizationComponentSpec_TensorType `protobuf:"varint,2,opt,name=tensor_type,json=tensorType,proto3,enum=tensorflow.quantization.QuantizationComponentSpec_TensorType" json:"tensor_type,omitempty"`
}

func (x *QuantizationComponentSpec) Reset() {
	*x = QuantizationComponentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantizationComponentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantizationComponentSpec) ProtoMessage() {}

func (x *QuantizationComponentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantizationComponentSpec.ProtoReflect.Descriptor instead.
func (*QuantizationComponentSpec) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{1}
}

func (x *QuantizationComponentSpec) GetQuantizationComponent() QuantizationComponentSpec_QuantizationComponent {
	if x != nil {
		return x.QuantizationComponent
	}
	return QuantizationComponentSpec_COMPONENT_UNSPECIFIED
}

func (x *QuantizationComponentSpec) GetTensorType() QuantizationComponentSpec_TensorType {
	if x != nil {
		return x.TensorType
	}
	return QuantizationComponentSpec_TENSORTYPE_UNSPECIFIED
}

// Unit (either nodes or ops at this moment) wise quantization method for
// mixed bit precision quantization. It contains the name of the unit,
// the granularity of the unit, and the quantization method for each unit.
// NEXT ID: 5
type UnitWiseQuantizationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Available quantization unit. Currently node-wise and op-wise are
	// available quantization units.
	UnitType UnitWiseQuantizationSpec_UnitType `protobuf:"varint,1,opt,name=unit_type,json=unitType,proto3,enum=tensorflow.quantization.UnitWiseQuantizationSpec_UnitType" json:"unit_type,omitempty"`
	// Uniqueness isn't guaranteed across SavedModels but within each function
	// def's level, uniqueness is guaranteed. Updated
	// the configuration interfaces to reflect such circumstances.
	// If users do not need to guarantee uniqueness func_name can be omitted.
	FuncName string `protobuf:"bytes,2,opt,name=func_name,json=funcName,proto3" json:"func_name,omitempty"`
	UnitName string `protobuf:"bytes,3,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	// Quantization option information for the current unit.
	// TODO(b/241322587): Support specifying quantization method for each unit of
	// TF GraphDef.
	QuantizationComponentSpec []*QuantizationComponentSpec `protobuf:"bytes,4,rep,name=quantization_component_spec,json=quantizationComponentSpec,proto3" json:"quantization_component_spec,omitempty"`
}

func (x *UnitWiseQuantizationSpec) Reset() {
	*x = UnitWiseQuantizationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitWiseQuantizationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitWiseQuantizationSpec) ProtoMessage() {}

func (x *UnitWiseQuantizationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitWiseQuantizationSpec.ProtoReflect.Descriptor instead.
func (*UnitWiseQuantizationSpec) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{2}
}

func (x *UnitWiseQuantizationSpec) GetUnitType() UnitWiseQuantizationSpec_UnitType {
	if x != nil {
		return x.UnitType
	}
	return UnitWiseQuantizationSpec_UNIT_UNSPECIFIED
}

func (x *UnitWiseQuantizationSpec) GetFuncName() string {
	if x != nil {
		return x.FuncName
	}
	return ""
}

func (x *UnitWiseQuantizationSpec) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *UnitWiseQuantizationSpec) GetQuantizationComponentSpec() []*QuantizationComponentSpec {
	if x != nil {
		return x.QuantizationComponentSpec
	}
	return nil
}

// Configurations for variable freezing during quantization passes.
// NEXT ID: 2
type FreezeAllVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Setting this to true freezes all variables to constants during
	// quantization. Setting this to `false` is an experimental feature and does
	// not have stability guarantees.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *FreezeAllVariables) Reset() {
	*x = FreezeAllVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeAllVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeAllVariables) ProtoMessage() {}

func (x *FreezeAllVariables) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeAllVariables.ProtoReflect.Descriptor instead.
func (*FreezeAllVariables) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{3}
}

func (x *FreezeAllVariables) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// The data format of each sample in the representative dataset.
type RepresentativeDataSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TensorProtoInputs map[string]*framework.TensorProto `protobuf:"bytes,2,rep,name=tensor_proto_inputs,json=tensorProtoInputs,proto3" json:"tensor_proto_inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RepresentativeDataSample) Reset() {
	*x = RepresentativeDataSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentativeDataSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentativeDataSample) ProtoMessage() {}

func (x *RepresentativeDataSample) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentativeDataSample.ProtoReflect.Descriptor instead.
func (*RepresentativeDataSample) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{4}
}

func (x *RepresentativeDataSample) GetTensorProtoInputs() map[string]*framework.TensorProto {
	if x != nil {
		return x.TensorProtoInputs
	}
	return nil
}

// Specifies the type and path to the representative dataset.
// NEXT ID: 2
type RepresentativeDatasetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only TfRecord file is supported at the moment but defining this field
	// as oneof so it can be easily extended to support other types.
	//
	// Types that are assignable to DatasetFile:
	//
	//	*RepresentativeDatasetFile_TfrecordFilePath
	DatasetFile isRepresentativeDatasetFile_DatasetFile `protobuf_oneof:"dataset_file"`
}

func (x *RepresentativeDatasetFile) Reset() {
	*x = RepresentativeDatasetFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepresentativeDatasetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepresentativeDatasetFile) ProtoMessage() {}

func (x *RepresentativeDatasetFile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepresentativeDatasetFile.ProtoReflect.Descriptor instead.
func (*RepresentativeDatasetFile) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{5}
}

func (m *RepresentativeDatasetFile) GetDatasetFile() isRepresentativeDatasetFile_DatasetFile {
	if m != nil {
		return m.DatasetFile
	}
	return nil
}

func (x *RepresentativeDatasetFile) GetTfrecordFilePath() string {
	if x, ok := x.GetDatasetFile().(*RepresentativeDatasetFile_TfrecordFilePath); ok {
		return x.TfrecordFilePath
	}
	return ""
}

type isRepresentativeDatasetFile_DatasetFile interface {
	isRepresentativeDatasetFile_DatasetFile()
}

type RepresentativeDatasetFile_TfrecordFilePath struct {
	TfrecordFilePath string `protobuf:"bytes,1,opt,name=tfrecord_file_path,json=tfrecordFilePath,proto3,oneof"`
}

func (*RepresentativeDatasetFile_TfrecordFilePath) isRepresentativeDatasetFile_DatasetFile() {}

// Defines various options to specify and control the behavior of the quantizer.
// It consists of
// 1) Model-wise quantization configuration as a default configuration. If it is
// None, the default configuration is "do not quantize the model".
// 2) A set of supported operations.
// 3) Unit wise quantization precision.
// 4) Target hardware name.
// NEXT ID: 15
type QuantizationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default quantization configuration for the model. If the below
	// unit-wise configuration does not exist, we use this quantization
	// configuration for the entire model. For each method, default configuration
	// is:
	// 1) STATIC_RANGE
	//   - COMPONENT_ACTIVATION: INT_8
	//   - COMPONENT_WEIGHT: INT_8
	//   - COMPONENT_BIAS: INT_32
	//
	// 2) WEIGHT_ONLY
	//   - COMPONENT_WEIGHT: INT_8
	//
	// 3) DYNAMIC_RANGE
	//   - COMPONENT_ACTIVATION: INT_8
	//   - COMPONENT_WEIGHT: INT_8
	//   - COMPONENT_BIAS: INT_32
	//
	// And different spec can be specified with quantization_component_specs.
	// If the below unit-wise configuration exists, this default one will become
	// the quantization configuration for units that are not specified in
	// unit-wise configurations.
	QuantizationMethod *QuantizationMethod `protobuf:"bytes,1,opt,name=quantization_method,json=quantizationMethod,proto3" json:"quantization_method,omitempty"`
	OpSet              OpSet               `protobuf:"varint,2,opt,name=op_set,json=opSet,proto3,enum=tensorflow.quantization.OpSet" json:"op_set,omitempty"` // If not specified, it defaults to `XLA`.
	// Quantization spec for each unit. Units can become either nodes or ops, and
	// the mixture of those different units are allowed. If there are conflicts or
	// ambiguity in this unit-wise precision, our quantizer will raise an error.
	UnitWiseQuantizationSpec []*UnitWiseQuantizationSpec `protobuf:"bytes,3,rep,name=unit_wise_quantization_spec,json=unitWiseQuantizationSpec,proto3" json:"unit_wise_quantization_spec,omitempty"`
	// (TF1 SavedModel only) Collection of tags identifying the MetaGraphDef
	// within the SavedModel to analyze. If not specified, ["serve"] is used.
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// Sequence of keys identifying SignatureDef containing inputs and outputs.
	// If not specified, ["serving_default"] is used.
	SignatureKeys []string `protobuf:"bytes,6,rep,name=signature_keys,json=signatureKeys,proto3" json:"signature_keys,omitempty"`
	// A map from signature keys to the corresponding representative dataset.
	RepresentativeDatasets map[string]*RepresentativeDatasetFile `protobuf:"bytes,7,rep,name=representative_datasets,json=representativeDatasets,proto3" json:"representative_datasets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Minimum number of weight elements to apply quantization. Currently only
	// supported for Post-training Dynamic Range Quantization. By default, it is
	// set to 1024. To disable this, set the value to -1 explicitly.
	MinNumElementsForWeights int64 `protobuf:"varint,8,opt,name=min_num_elements_for_weights,json=minNumElementsForWeights,proto3" json:"min_num_elements_for_weights,omitempty"`
	// When set to `true`, freezes all variables in the model into constants.
	// When set to `false` the model's large constants are converted to variables.
	// Setting this to `false` is an experimental feature and quantization may
	// fail. To quantize models larger than 2 GiB, this should be set to `false`.
	// If not set, it defaults to `true`.
	FreezeAllVariables *FreezeAllVariables `protobuf:"bytes,9,opt,name=freeze_all_variables,json=freezeAllVariables,proto3" json:"freeze_all_variables,omitempty"`
	// Enables chnanel-wise quantizaiton. By default, channel-wise quantization is
	// not applied regardless of the op support. Currently, it is supported for
	// Uniform Quantized opset only.
	EnablePerChannelQuantization bool `protobuf:"varint,10,opt,name=enable_per_channel_quantization,json=enablePerChannelQuantization,proto3" json:"enable_per_channel_quantization,omitempty"`
	// Enables two inputs of an operation to be both tensors.
	// Currently supports MatMul and BatchMatMul ops for XLA.
	// TODO(b/263528090): Check the condition when this feature is beneficial.
	EnableTwoInputTensors bool `protobuf:"varint,11,opt,name=enable_two_input_tensors,json=enableTwoInputTensors,proto3" json:"enable_two_input_tensors,omitempty"`
	// Supports TPU model quantization. If the target model for the quantization
	// is already converted for TPU, this flag may be helpful. Note that this
	// feature may be unstable as it is under the experimental stage.
	ExperimentalEnableTpuModelSupport bool `protobuf:"varint,12,opt,name=experimental_enable_tpu_model_support,json=experimentalEnableTpuModelSupport,proto3" json:"experimental_enable_tpu_model_support,omitempty"`
	// Produces legacy weight-only graph where the qconst op(containing quantized
	// values) is followed by a dequantization op.
	EnableLegacyWeightOnly bool `protobuf:"varint,13,opt,name=enable_legacy_weight_only,json=enableLegacyWeightOnly,proto3" json:"enable_legacy_weight_only,omitempty"`
	// If set to true, it forces calibration in graph model instead of eager mode
	// when the context is in eager mode.
	ForceGraphModeCalibration bool `protobuf:"varint,14,opt,name=force_graph_mode_calibration,json=forceGraphModeCalibration,proto3" json:"force_graph_mode_calibration,omitempty"`
}

func (x *QuantizationOptions) Reset() {
	*x = QuantizationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantizationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantizationOptions) ProtoMessage() {}

func (x *QuantizationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantizationOptions.ProtoReflect.Descriptor instead.
func (*QuantizationOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP(), []int{6}
}

func (x *QuantizationOptions) GetQuantizationMethod() *QuantizationMethod {
	if x != nil {
		return x.QuantizationMethod
	}
	return nil
}

func (x *QuantizationOptions) GetOpSet() OpSet {
	if x != nil {
		return x.OpSet
	}
	return OpSet_OP_SET_UNSPECIFIED
}

func (x *QuantizationOptions) GetUnitWiseQuantizationSpec() []*UnitWiseQuantizationSpec {
	if x != nil {
		return x.UnitWiseQuantizationSpec
	}
	return nil
}

func (x *QuantizationOptions) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuantizationOptions) GetSignatureKeys() []string {
	if x != nil {
		return x.SignatureKeys
	}
	return nil
}

func (x *QuantizationOptions) GetRepresentativeDatasets() map[string]*RepresentativeDatasetFile {
	if x != nil {
		return x.RepresentativeDatasets
	}
	return nil
}

func (x *QuantizationOptions) GetMinNumElementsForWeights() int64 {
	if x != nil {
		return x.MinNumElementsForWeights
	}
	return 0
}

func (x *QuantizationOptions) GetFreezeAllVariables() *FreezeAllVariables {
	if x != nil {
		return x.FreezeAllVariables
	}
	return nil
}

func (x *QuantizationOptions) GetEnablePerChannelQuantization() bool {
	if x != nil {
		return x.EnablePerChannelQuantization
	}
	return false
}

func (x *QuantizationOptions) GetEnableTwoInputTensors() bool {
	if x != nil {
		return x.EnableTwoInputTensors
	}
	return false
}

func (x *QuantizationOptions) GetExperimentalEnableTpuModelSupport() bool {
	if x != nil {
		return x.ExperimentalEnableTpuModelSupport
	}
	return false
}

func (x *QuantizationOptions) GetEnableLegacyWeightOnly() bool {
	if x != nil {
		return x.EnableLegacyWeightOnly
	}
	return false
}

func (x *QuantizationOptions) GetForceGraphModeCalibration() bool {
	if x != nil {
		return x.ForceGraphModeCalibration
	}
	return false
}

var File_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x6d, 0x6c, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee,
	0x03, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x71, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x74, 0x0a, 0x1c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x1a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x20, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x22, 0x6f,
	0x0a, 0x12, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x42,
	0x0e, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22,
	0xe1, 0x03, 0x0a, 0x19, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x7f, 0x0a,
	0x16, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x5e,
	0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x76,
	0x0a, 0x15, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x49, 0x41, 0x53, 0x10, 0x03, 0x22, 0x6b, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x34, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x38, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x33,
	0x32, 0x10, 0x03, 0x22, 0xdf, 0x02, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x69, 0x73, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x57, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x57, 0x69, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x1b, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x19, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x22, 0x3c, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4f, 0x50, 0x10, 0x02, 0x22, 0x2e, 0x0a, 0x12, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41,
	0x6c, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x78, 0x0a, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x16,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x19, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x66, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x74, 0x66, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xc7, 0x08, 0x0a, 0x13, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5c, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x53, 0x65, 0x74, 0x52, 0x05,
	0x6f, 0x70, 0x53, 0x65, 0x74, 0x12, 0x70, 0x0a, 0x1b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x77, 0x69,
	0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x57, 0x69, 0x73, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x18, 0x75,
	0x6e, 0x69, 0x74, 0x57, 0x69, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d, 0x69,
	0x6e, 0x4e, 0x75, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x6c, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x12, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x6c, 0x6c, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x70, 0x75,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x7d, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x47, 0x0a, 0x05, 0x4f, 0x70, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x46, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x58,
	0x4c, 0x41, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x42, 0x94, 0x02, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x6d, 0x6c, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0xf8, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x54, 0x51, 0x58, 0xaa, 0x02, 0x17,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x17, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0xe2, 0x02, 0x23, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescData = file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDesc
)

func file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescData)
	})
	return file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDescData
}

var file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_goTypes = []interface{}{
	(OpSet)(0),                                           // 0: tensorflow.quantization.OpSet
	(QuantizationMethod_Method)(0),                       // 1: tensorflow.quantization.QuantizationMethod.Method
	(QuantizationMethod_ExperimentalMethod)(0),           // 2: tensorflow.quantization.QuantizationMethod.ExperimentalMethod
	(QuantizationComponentSpec_QuantizationComponent)(0), // 3: tensorflow.quantization.QuantizationComponentSpec.QuantizationComponent
	(QuantizationComponentSpec_TensorType)(0),            // 4: tensorflow.quantization.QuantizationComponentSpec.TensorType
	(UnitWiseQuantizationSpec_UnitType)(0),               // 5: tensorflow.quantization.UnitWiseQuantizationSpec.UnitType
	(*QuantizationMethod)(nil),                           // 6: tensorflow.quantization.QuantizationMethod
	(*QuantizationComponentSpec)(nil),                    // 7: tensorflow.quantization.QuantizationComponentSpec
	(*UnitWiseQuantizationSpec)(nil),                     // 8: tensorflow.quantization.UnitWiseQuantizationSpec
	(*FreezeAllVariables)(nil),                           // 9: tensorflow.quantization.FreezeAllVariables
	(*RepresentativeDataSample)(nil),                     // 10: tensorflow.quantization.RepresentativeDataSample
	(*RepresentativeDatasetFile)(nil),                    // 11: tensorflow.quantization.RepresentativeDatasetFile
	(*QuantizationOptions)(nil),                          // 12: tensorflow.quantization.QuantizationOptions
	nil,                                                  // 13: tensorflow.quantization.RepresentativeDataSample.TensorProtoInputsEntry
	nil,                                                  // 14: tensorflow.quantization.QuantizationOptions.RepresentativeDatasetsEntry
	(*framework.TensorProto)(nil),                        // 15: tensorflow.TensorProto
}
var file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_depIdxs = []int32{
	1,  // 0: tensorflow.quantization.QuantizationMethod.method:type_name -> tensorflow.quantization.QuantizationMethod.Method
	2,  // 1: tensorflow.quantization.QuantizationMethod.experimental_method:type_name -> tensorflow.quantization.QuantizationMethod.ExperimentalMethod
	7,  // 2: tensorflow.quantization.QuantizationMethod.quantization_component_specs:type_name -> tensorflow.quantization.QuantizationComponentSpec
	3,  // 3: tensorflow.quantization.QuantizationComponentSpec.quantization_component:type_name -> tensorflow.quantization.QuantizationComponentSpec.QuantizationComponent
	4,  // 4: tensorflow.quantization.QuantizationComponentSpec.tensor_type:type_name -> tensorflow.quantization.QuantizationComponentSpec.TensorType
	5,  // 5: tensorflow.quantization.UnitWiseQuantizationSpec.unit_type:type_name -> tensorflow.quantization.UnitWiseQuantizationSpec.UnitType
	7,  // 6: tensorflow.quantization.UnitWiseQuantizationSpec.quantization_component_spec:type_name -> tensorflow.quantization.QuantizationComponentSpec
	13, // 7: tensorflow.quantization.RepresentativeDataSample.tensor_proto_inputs:type_name -> tensorflow.quantization.RepresentativeDataSample.TensorProtoInputsEntry
	6,  // 8: tensorflow.quantization.QuantizationOptions.quantization_method:type_name -> tensorflow.quantization.QuantizationMethod
	0,  // 9: tensorflow.quantization.QuantizationOptions.op_set:type_name -> tensorflow.quantization.OpSet
	8,  // 10: tensorflow.quantization.QuantizationOptions.unit_wise_quantization_spec:type_name -> tensorflow.quantization.UnitWiseQuantizationSpec
	14, // 11: tensorflow.quantization.QuantizationOptions.representative_datasets:type_name -> tensorflow.quantization.QuantizationOptions.RepresentativeDatasetsEntry
	9,  // 12: tensorflow.quantization.QuantizationOptions.freeze_all_variables:type_name -> tensorflow.quantization.FreezeAllVariables
	15, // 13: tensorflow.quantization.RepresentativeDataSample.TensorProtoInputsEntry.value:type_name -> tensorflow.TensorProto
	11, // 14: tensorflow.quantization.QuantizationOptions.RepresentativeDatasetsEntry.value:type_name -> tensorflow.quantization.RepresentativeDatasetFile
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_init() }
func file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_init() {
	if File_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantizationMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantizationComponentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitWiseQuantizationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeAllVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentativeDataSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepresentativeDatasetFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantizationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*QuantizationMethod_Method_)(nil),
		(*QuantizationMethod_ExperimentalMethod_)(nil),
	}
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RepresentativeDatasetFile_TfrecordFilePath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_depIdxs,
		EnumInfos:         file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_enumTypes,
		MessageInfos:      file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto = out.File
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_rawDesc = nil
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_goTypes = nil
	file_tensorflow_compiler_mlir_quantization_tensorflow_quantization_options_proto_depIdxs = nil
}
